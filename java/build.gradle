/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.4.1/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    // code coverage
    id "jacoco"
    // static code analysis
    // id "pmd"
    // post build results online
    id "com.gradle.build-scan" version "2.0.2"
    // git clone, etc.
    id "org.ajoberstar.grgit" version "2.3.0"
    // google java format
    // id "com.github.sherter.google-java-format" version "0.8"
}

sourceCompatibility = '1.10'
targetCompatibility = '1.10'
version = '0.1.0'

repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
}

configurations {
  codacy
}

dependencies {
    // com.googlecode.json.simple
    compile "com.googlecode.json-simple:json-simple:1.1.1"

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}

// set jar entry point
jar {
  manifest {
    attributes(
      'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
      'Main-Class': 'gov.usgs.processingformats.Version'
    )
  }
  from {
      configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
  }
}

// Note: To reformat all java code (not in lib) into the
// google java style, run ./gradlew goJF
// googleJavaFormat {
//   exclude "lib/**"
// }
// Google java style is checked automatically as part of the check task
// project.tasks.check.dependsOn(verifyGoogleJavaFormat)

// coverage reports
jacoco {
  toolVersion "0.8.2"
}
jacocoTestReport {
  reports {
    html.enabled true
    xml.enabled true
  }

  // exclude librarys
  afterEvaluate {
        getClassDirectories().from(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "gov/usgs/traveltime/**"
            ])
        }))
    }
}
check.dependsOn jacocoTestReport

// show compile warnings
tasks.withType(JavaCompile) {
  options.compilerArgs.add("-parameters")
  options.encoding = "UTF-8"
  options.setDeprecation(true);
  options.setWarnings(true);
}

// create javadocs
javadoc {
  if(JavaVersion.current() != JavaVersion.VERSION_1_8) {
    options.addBooleanOption('html5', true)
  }
}

// Tasks for TravisCI

// run with "gradle build --scan" to post build output online
buildScan {
  termsOfServiceUrl = "https://gradle.com/terms-of-service"
  termsOfServiceAgree = "yes"
}

// .travis.yml uses this to upload coverage
task sendCoverageToCodacy(type: JavaExec, dependsOn: jacocoTestReport) {
  description = "Upload coverage to codacy (used by TravisCI)"
  main = "com.codacy.CodacyCoverageReporter"
  classpath = configurations.codacy
  args = [
    "report",
    "-l",
    "Java",
    "-r",
    "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
  ]
}
